pipeline {
    agent any
    options {
        timeout(time: 10, unit: 'MINUTES')
    }

    environment {
        DOCKERHUB_TOKEN = 'dckr_pat_WPMPYvvaDaiufO9ZJEdtM9z3eQQ' 
    }

    stages {
        stage('Preparation') {
            steps {
                script {
                    // Verifica si Docker est치 instalado
                    def dockerVersion = sh(returnStdout: true, script: 'docker --version').trim()
                    if (dockerVersion.isEmpty()) {
                        // Instala el cliente de Docker dentro del contenedor de Jenkins
                        sh 'apk add docker-cli' // o 'apt-get install docker-ce-cli' dependiendo de la distribuci칩n
                    }
                }
            }
        }

        stage('Building image') {
            steps {
                script {
                    docker.build('testapp')
                }
            }
        }

        stage('Remove existing container') {
            steps {
                script {
                    try {
                        bat 'docker stop testapp_container'
                        bat 'docker rm testapp_container'
                    } catch (Exception e) {
                        echo "No existing container with the name testapp_container found."
                    }
                }
            }
        }

        stage('Run container') {
            steps {
                script {
                    docker.image('testapp').run('-d -p 8085:8080 --name appMundos_container')
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    if (isUnix()) {
                        def result = sh(script: 'docker ps | grep testapp', returnStdout: true)
                        echo "Resultado de la verificaci칩n: ${result}"
                    } else {
                        def result = bat(script: 'docker ps | findstr testapp', returnStdout: true)
                        echo "Resultado de la verificaci칩n: ${result}"
                    }
                }
            }
        }

        stage('Tag image') {
            steps {
                script {
                    def dockerhubUsername = env.DOCKERHUB_USERNAME
                    bat "docker tag testapp ${dockerhubUsername}/testapp:latest"
                }
            }
        }

        stage('Push image to Docker Hub') {
            steps {
                script {
                    def dockerhubUsername = env.DOCKERHUB_USERNAME
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                        docker.image("${dockerhubUsername}/testapp:latest").push("${DOCKERHUB_TOKEN}")
                    }
                }
            }
        }
    }
}
