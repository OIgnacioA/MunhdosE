pipeline {
    agent any
    options {
        timeout(time: 2, unit: 'MINUTES')
    }
    stages {
        stage('Building image') {
            steps {
                script {
                    docker.build('testapp')
                }
            }
        }
        
        stage('Remove existing container') {
          steps {
              script {
                  // Intenta detener y eliminar el contenedor existente
                  try {
                      sh 'docker stop testapp_container || true'
                      sh 'docker rm testapp_container || true'
                  } catch (Exception e) {
                      echo "No existing container with the name testapp_container found."
                  }
              }
          }
       }

        stage('Run container') {
            steps {
                script {
                    docker.image('testapp').run('-d -p 8082:8080 --name testapp_container')
                }
            }
        }
        stage('Health Check') {
            steps {
                script {
                    if (isUnix()) {
                        def result = sh(script: 'docker ps | grep testapp', returnStdout: true)
                        echo "Resultado de la verificación: ${result}"
                    } else {
                        def result = bat(script: 'docker ps | findstr testapp', returnStdout: true)
                        echo "Resultado de la verificación: ${result}"
                    }
                }
            }
        }
        stage('Push image to Docker Hub') {
            environment {
                DOCKERHUB_USERNAME = 'sehent@hotmail.com'
                DOCKERHUB_PASSWORD = 'Ludobica555'
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                            docker.image('testapp').push("${env.DOCKERHUB_USERNAME}/testapp")
                        }
                    }
                }
            }
        }
    }
}
